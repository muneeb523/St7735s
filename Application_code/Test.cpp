#include <iostream>

// Ensure C functions can be used in C++
extern "C" {
#include "../st7735s.h"
#include "../fonts.h"
#include "../gfx.h"
#include "../image.h"
}
uint16_t image_data[] = { 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00C2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00C2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00C2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x0002, 0x0083, 0x00C3, 0x0003, 0x0003, 0x0003, 0x0003, 0x0003, 0x0003, 0x0003, 0x0003, 0x0063, 0x0022, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00C2, 0x00A3, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x0063, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x0063, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x0042, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x0002, 0x00A3, 0x0063, 0x00C4, 0x0043, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x0062, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x0003, 0x00C3, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x0003, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x0022, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x0083, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x0023, 0x00A2, 0x00A2, 0x0043, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x0062, 0x00A2, 0x00A2, 0x00C2, 0x00A2, 0x00A2, 0x00A2, 0x0082, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x0002, 0x00A2, 0x00C2, 0x0002, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x0082, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x0082, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x0043, 0x00A2, 0x00A2, 0x0003, 0x00C4, 0x00C3, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x0062, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x0082, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C3, 0x0003, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x0082, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x0082, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C3, 0x00C4, 0x00C4, 0x00C4, 0x0082, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x0082, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x0082, 0x00A2, 0x00C2, 0x00A2, 0x00C2, 0x00A2, 0x00A2, 0x0082, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x0062, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x0082, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x0082, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x0042, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x0003, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x0022, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00E2, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x0042, 0x00E3, 0x0064, 0x00C4, 0x0043, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00C2, 0x00A2, 0x0003, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x0063, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x0002, 0x0063, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00C4, 0x00A3, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00C2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00E3, 0x00C3, 0x0003, 0x0003, 0x0003, 0x0003, 0x0003, 0x0003, 0x0003, 0x00E3, 0x0083, 0x0002, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00C2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2 };
// Define modes
enum Mode {
    CAMERA,
    SOUND,
    CALL,
    TORCH
};

Mode current_mode = CAMERA;  // Start with Camera mode
int previous_mode = -1;  
class DisplayExample {
public:
    void run() {
        ST7735S_Init();
        setOrientation(R180);  // Set display orientation for landscape mode
        int i=1;
        while (i) {
            drawUI();  // Refresh UI
            i=0;
          //  waitForButtonPress(); // Wait for a button press to change mode
        }
    }

    void drawUI() {

        fillScreen();  // Clear screen

        // Define pie wedge angles
        // float angles[4][2] = {
        //     {0, 90},    // CAMERA
        //     {90, 180},  // SOUND
        //     {180, 270}, // CALL
        //     {270, 360}  // TORCH
        // };

        // int centerX = 80;  // Adjusted for landscape mode
        // int centerY = 40;
        // int radius = 35;   // Reduced radius for better fitting

        // // Draw pie wedges dynamically
        // for (int i = 0; i < 4; i++) {
        //     if (i == current_mode) {
        //         setColor(31, 31, 0);  // Active mode: Bright Yellow (RGB565)
        //         drawPie(centerX, centerY, radius, angles[i][0], angles[i][1]);
        //     } else {
        //         setColor(10, 10, 10);  // Inactive mode: Dark gray
        //         drawPie(centerX, centerY, radius - 5, angles[i][0], angles[i][1]);
        //     }
        // }

        // Adjusted icon positions for landscape mode
        struct IconPosition {
            int x, y;
        };

        IconPosition positions[4] = {
            {100, 10}, // CAMERA
            {40, 20},  // SOUND
            {40, 50},  // CALL
            {120, 50}  // TORCH
        };

        // Draw correct icon for the current mode
        switch (current_mode) {
            case CAMERA:
                drawImage(positions[0].x, positions[0].y, cam_on, 28, 28);
                break;
            case SOUND:
                drawImage(positions[1].x, positions[1].y, cam_on, 27, 27);
                break;
            case CALL:
                drawImage(positions[2].x, positions[2].y, mic, 27, 27);
                break;
            case TORCH:
                drawImage(positions[3].x, positions[3].y,cam_on, 27, 27);
                break;
        }

        // // Draw battery and signal icons at the top
        drawImage(20, 5, battery_good, 24, 24);
        // drawImage(140, 5, signal_icon, 27, 27);

        flushBuffer();  // Update display
    }

    void waitForButtonPress() {
        while (!isButtonPressed()) {}
        updateMode();
    }

    bool isButtonPressed() {
        // Placeholder for real button press logic (use GPIO input if applicable)
        static int counter = 0;
        counter++;
        return (counter % 1000000 == 0); // Simulated press for testing
    }

    void updateMode() {
        current_mode = static_cast<Mode>((current_mode + 1) % 4); // Cycle modes
    }
};

int main() {
    std::cout << "Start" << std::endl;
    DisplayExample display;
    display.run();
    return 0;
}
